atlasambiental["fator1"] <- F1$fator1
#Criando um ranking pela soma ponderada dos fatores por sua variância
#compartilhada
atlasambiental %>%
mutate(pontuacao = fator1 *
relatorio$var_compartilhada[1]) -> atlasambiental
#Visualizando o ranking final
atlasambiental %>%
arrange(desc(pontuacao)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Carregando o mapa
load(file = "mapa_sp.RData")
#Visualizando o mapa
tm_shape(mapa_sp) +
tm_borders()
#Acrescentando informações ao mapa
mapa_sp@data$COD_DIST <- as.numeric(mapa_sp@data$COD_DIST)
distritos_dados <- merge(mapa_sp,
atlasambiental,
by.x = "COD_DIST",
by.y = "cod_ibge")
#Plotando os rankings
tmap_mode("view") #modo interativo - para acionar o modo offline, basta
tm_shape(distritos_dados) +
tm_fill("pontuacao", midpoint = 0, palette = "RdBu",
style = "quantile", n = 10, legend.show = T) +
tm_borders(alpha = 0.8) +
tm_text("distritos")
setwd("C:/Users/Renato/Downloads")
load("rho_arquivo01.RData")
View(rho_aqruivo01)
rho_arquivo01
load("rho_arquivo01.RData")
rho_arquivo01
rho_arquivo01 %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
View(rho_aqruivo01)
load("C:/Users/Renato/Downloads/rho_arquivo01.RData")
load("C:/Users/Renato/Downloads/rho_arquivo01.RData")
rho_arquivo01
file <- load("rho_arquivo01.RData")
file
file %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
pacotes <- c("plotly","tidyverse","knitr","kableExtra","car","rgl","gridExtra",
"PerformanceAnalytics","reshape2","rayshader","psych","ggrepel",
"factoextra","sp","tmap","magick","gridExtra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
load("rho_arquivo01.RData")
rho_arquivo01
setwd("C:/Users/Renato/Desktop")
load("rho_arquivo01.RData")
rho_arquivo01
View(rho_aqruivo01)
load("C:/Users/Renato/Desktop/rho_arquivo01.RData")
rho_arquivo01
View(rho_aqruivo01)
load("C:/Users/Renato/Desktop/pca_arquivo02.RData")
load("C:/Users/Renato/Desktop/pca_arquivo02.RData")
load("C:/Users/Renato/Desktop/rho_arquivo01.RData")
# Proposta de estudo de validação de constructos --------------------------
load("percepcao_lojas.RData")
# Questionário proposto
questionario <- image_read("questionário.png")
plot(questionario)
# Apresentando a base de dados:
percepcao_lojas %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
pacotes <- c("plotly","tidyverse","knitr","kableExtra","car","rgl","gridExtra",
"PerformanceAnalytics","reshape2","rayshader","psych","ggrepel",
"factoextra","sp","tmap","magick","gridExtra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Proposta de estudo de validação de constructos --------------------------
load("percepcao_lojas.RData")
# Questionário proposto
questionario <- image_read("questionário.png")
plot(questionario)
# Apresentando a base de dados:
percepcao_lojas %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Analisando as correlações entre variáveis da base de dados percepcao_lojas
chart.Correlation(percepcao_lojas, histogram = TRUE)
# Proposta de elaboração de um ranking de produtos "mais saudáveis"
load("cereais.RData")
# Apresentando a base de dados:
cereais %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
View(cereais)
# Analisando as correlações entre variáveis da base de dados cereais
chart.Correlation(cereais[, 4:14], histogram = TRUE, pch = "+")
# Salvando a Matriz de Correlações -----------------------------------
rho_cereais <- cor(cereais[, 4:14])
View(rho_cereais)
pacotes <- c("plotly","tidyverse","knitr","kableExtra","car","rgl","gridExtra",
"PerformanceAnalytics","reshape2","rayshader","psych","ggrepel",
"factoextra","sp","tmap","magick","gridExtra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
pacotes <- c("plotly","tidyverse","knitr","kableExtra","car","rgl","gridExtra",
"PerformanceAnalytics","reshape2","rayshader","psych","ggrepel",
"factoextra","sp","tmap","magick","gridExtra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Proposta de elaboração de um ranking e plotagem espacial ----------------
load("atlasambiental.RData")
# Apresentando a base de dados:
atlasambiental %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
View(atlasambiental)
# Analisando as correlações entre variáveis da base de dados atlasambiental
chart.Correlation(atlasambiental[, 3:11], histogram = TRUE, pch = "+")
# Salvando a Matriz de Correlações -----------------------------------
rho_atlas <- cor(atlasambiental[,3:11])
View(rho_atlas)
# Construindo um mapa de calor a partir das correlações
rho_atlas %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
# Primeiro passo: salvando o mapa de calor 2D
plot3d_rho_atlas <- rho_atlas %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value, color = value),
color = "black") +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(axis.text.x = element_text(size = 26, angle = 90),
axis.text.y = element_text(size = 26),
title = element_text(size = 18,face = "bold"),
panel.border= element_rect(size = 4, color = "black", fill = NA))
plot3d_rho_atlas
# O teste de efericidade de Bartlett --------------------------------------
cortest.bartlett(R = rho_atlas)
# O algoritmo prcomp(), do pacote psych, EXIGE que a a matriz de dados fornecida
# a ele já esteja padronizada pelo procedimento zscores:
atlasambiental_std <- atlasambiental %>%
select(-cod_ibge) %>%
column_to_rownames("distritos") %>%
scale() %>%
data.frame()
View(atlasambiental_std)
# Rodando a PCA
afpc_atlas <- prcomp(atlasambiental_std)
summary(afpc_atlas)
# Rodando a PCA
afpc_atlas <- prcomp(atlasambiental_std)
summary(afpc_atlas)
# Sumarizando pontos importantes:
data.frame(eigenvalue = afpc_atlas$sdev ^ 2,
var_compartilhada = summary(afpc_atlas)$importance[2,],
var_cumulativa = summary(afpc_atlas)$importance[3,]) -> relatorio
relatorio %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Visualizando os pesos que cada variável tem em cada componente principal
# obtido pela PCA
ggplotly(
data.frame(afpc_atlas$rotation) %>%
mutate(var = names(atlasambiental[3:11])) %>%
melt(id.vars = "var") %>%
mutate(var = factor(var)) %>%
ggplot(aes(x = var, y = value, fill = var)) +
geom_bar(stat = "identity", color = "black") +
facet_wrap(~variable) +
labs(x = NULL, y = NULL, fill = "Legenda:") +
scale_fill_viridis_d() +
theme_bw() +
theme(axis.text.x = element_text(angle = 90))
)
#Extraindo as Cargas Fatoriais
k <- sum((afpc_atlas$sdev ^ 2) > 1)
cargas_fatoriais <- afpc_atlas$rotation[, 1:k] %*% diag(afpc_atlas$sdev[1:k])
# Visualizando as cargas fatoriais
data.frame(cargas_fatoriais) %>%
rename(F1 = X1,
F2 = X2) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Visualizando as Comunalidades
data.frame(rowSums(cargas_fatoriais ^ 2)) %>%
rename(comunalidades = 1) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Relatório das cargas fatoriais e das comunalidades
data.frame(cargas_fatoriais) %>%
rename(F1 = X1,
F2 = X2) %>%
mutate(Comunalidades = rowSums(cargas_fatoriais ^ 2)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Plotagem das Cargas Fatoriais
data.frame(cargas_fatoriais) %>%
ggplot(aes(x = X1, y = X2)) +
geom_point(color = "orange") +
geom_hline(yintercept = 0, color = "darkorchid") +
geom_vline(xintercept = 0, color = "darkorchid") +
geom_text_repel(label = row.names(cargas_fatoriais)) +
labs(x = "F1",
y = "F2") +
theme_bw()
# Scores Fatoriais
scores_fatoriais <- t(afpc_atlas$rotation)/afpc_atlas$sdev
colnames(scores_fatoriais) <- colnames(atlasambiental_std)
scores_fatoriais
scores_fatoriais %>%
t() %>%
data.frame() %>%
rename(PC1 = 1,
PC2 = 2) %>%
select(PC1, PC2) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Assumindo-se apenas o F1 como indicador, calculam-se os scores fatoriais:
score_D1 <- scores_fatoriais[1,]
score_D1
score_D2 <- scores_fatoriais[2,]
score_D2
#Estabelecendo o ranking dos indicadores assumido
F1 <- t(apply(atlasambiental_std, 1, function(x) x * score_D1))
F2 <- t(apply(notasfatorial_std, 1, function(x) x * score_D2))
F2 <- t(apply(atlasambiental_std, 1, function(x) x * score_D2))
F1 %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
F2 %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Na construção de rankings no R, devemos efetuar a multiplicação por -1,
#visto que os scores fatoriais das observações mais fortes são, por padrão,
#apresentados acompanhados do sinal de menos.
F1 <- data.frame(F1) %>%
mutate(fator1 = rowSums(.) * -1)
F1 %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
F2 <- data.frame(F2) %>%
mutate(fator2 = rowSums(.) * -1)
F2 %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Importando a coluna referente ao fator F1:
atlasambiental["fator1"] <- F1$fator1
atlasambiental["fator2"] <- F1$fator2
var_compartilhada <- (afpc$sdev ^ 2/sum(afpc$sdev ^ 2))
atlasambiental %>%
mutate(pontuacao = fator1 *
relatorio$var_compartilhada[1] +
fator2 *
relatorio$var_compartilhada[2]) -> atlasambiental
atlasambiental %>%
mutate(pontuacao = fator1 * relatorio$var_compartilhada[1] +
fator2 * relatorio$var_compartilhada[2]) -> atlasambiental
#Visualizando o ranking final
atlasambiental %>%
arrange(desc(pontuacao)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Importando a coluna referente ao fator F1:
atlasambiental["fator1"] <- F1$fator1
atlasambiental["fator2"] <- F1$fator2
atlasambiental %>%
mutate(pontuacao = fator1 * relatorio$var_compartilhada[1] +
fator2 * relatorio$var_compartilhada[2]) -> atlasambiental
#Criando um ranking pela soma ponderada dos fatores por sua variância
#compartilhada
var_compartilhada <- (afpc_atlas$sdev ^ 2/sum(afpc_atlas$sdev ^ 2))
var_compartilhada
atlasambiental %>%
mutate(pontuacao = fator1 * relatorio$var_compartilhada[1] +
fator2 * relatorio$var_compartilhada[2]) -> atlasambiental
#Na construção de rankings no R, devemos efetuar a multiplicação por -1,
#visto que os scores fatoriais das observações mais fortes são, por padrão,
#apresentados acompanhados do sinal de menos.
F1 <- data.frame(F1) %>%
mutate(fator1 = rowSums(.) * -1)
F1 %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
F2 <- data.frame(F2) %>%
mutate(fator2 = rowSums(.) * -1)
F2 %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Importando a coluna referente ao fator F1:
atlasambiental["fator1"] <- F1$fator1
atlasambiental["fator2"] <- F1$fator2
#Criando um ranking pela soma ponderada dos fatores por sua variância
#compartilhada
var_compartilhada <- (afpc_atlas$sdev ^ 2/sum(afpc_atlas$sdev ^ 2))
var_compartilhada
atlasambiental %>%
mutate(pontuacao = fator1 * relatorio$var_compartilhada[1] +
fator2 * relatorio$var_compartilhada[2]) -> atlasambiental
fator1
fator2
#Visualizando o ranking final
atlasambiental %>%
arrange(desc(pontuacao)) %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
#Carregando o mapa
load(file = "mapa_sp.RData")
#Visualizando o mapa
tm_shape(mapa_sp) +
tm_borders()
#Acrescentando informações ao mapa
mapa_sp@data$COD_DIST <- as.numeric(mapa_sp@data$COD_DIST)
distritos_dados <- merge(mapa_sp,
atlasambiental,
by.x = "COD_DIST",
by.y = "cod_ibge")
#Plotando os rankings
tmap_mode("view") #modo interativo - para acionar o modo offline, basta
tm_shape(distritos_dados) +
tm_fill("pontuacao", midpoint = 0, palette = "RdBu",
style = "quantile", n = 10, legend.show = T) +
tm_borders(alpha = 0.8) +
tm_text("distritos")
vetor <- c(1, 2, 3)
vetor[4]
5 == NA
# O computador não consegue representar um número tão grande.
# O número é então """arredondado""" para infinito.
10^310
# Limite matemático
1 / 0
# O "menos infinito" também existe
-1 / 0
nao_sou_um_numero <- NaN
objeto_infinito <- Inf
objeto_nulo <- NULL
is.nan(nao_sou_um_numero)
is.infinite(objeto_infinito)
is.null(objeto_nulo)
list(1, "a", TRUE)
lista <- list(1, "a", TRUE)
lista[1]
class(lista[1])
lista[[1]]
class(lista[[1]])
lista <- list(1:3, "a", c(TRUE, TRUE, FALSE, FALSE))
lista
dados_cliente <- list(cliente = "Ana", idade = 25, estado_civil = NA)
dados_cliente
dados_cliente$cliente
dados_cliente$idade
dados_cliente[1]
class(dados_cliene[1])
class(dados_cliente[1])
class(dados_cliente$cliente)
as.list(mtcars)
# usar o operar $ para acessar cada elemento da lista (coluna do df)
mtcars$mpg
mtcars[1]
dados_cliente <- list(
cliente = c("Ana", "Beto", "Carla"),
idade = c(25, 30, 23),
estado_civil = c(NA, "Solteiro", "Casada")
)
dados_cliente
as.data.frame(dados_cliente)
dados_cliente <- list(
c("Ana", "Beto", "Carla"),
c(25, 30, 23),
c(NA, "Solteira", "Casada")
)
as.data.frame(dados_cliente)
class(mtcars)
dim(mtcars)
class(mtcars)
dim(mtcars)
mtcars$cyl == 4
pacotes <- c("plotly","tidyverse","knitr","kableExtra","car","rgl","gridExtra",
"PerformanceAnalytics","reshape2","rayshader","psych","ggrepel",
"factoextra","sp","tmap","magick","gridExtra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Proposta de elaboração de um ranking de produtos "mais saudáveis"
load("cereais.RData")
# Apresentando a base de dados:
cereais %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = T,
font_size = 12)
# Analisando as correlações entre variáveis da base de dados cereais
chart.Correlation(cereais[, 4:14], histogram = TRUE, pch = "+")
# Salvando a Matriz de Correlações -----------------------------------
rho_cereais <- cor(cereais[, 4:14])
# Construindo um mapa de calor a partir das correlações
rho_cereais %>%
melt() %>%
ggplot() +
geom_tile(aes(x = Var1, y = Var2, fill = value)) +
geom_text(aes(x = Var1, y = Var2, label = round(x = value, digits = 3)),
size = 4) +
labs(x = NULL,
y = NULL,
fill = "Correlações") +
scale_fill_gradient2(low = "dodgerblue4",
mid = "white",
high = "brown4",
midpoint = 0) +
theme(panel.background = element_rect("white"),
panel.grid = element_line("grey95"),
panel.border = element_rect(NA),
legend.position = "bottom",
axis.text.x = element_text(angle = 0))
